# streamlit_tz_to_telegram_app.py
# -*- coding: utf-8 -*-
"""
Streamlit: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¢–ó –∏–∑ –∏–¥–µ–π ‚Üí —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ –¢–ó ‚Üí –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: streamlit, openai>=1.0.0,<3, requests
–ó–∞–ø—É—Å–∫:     streamlit run streamlit_tz_to_telegram_app.py

–°–µ–∫—Ä–µ—Ç—ã (.streamlit/secrets.toml) ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞:

# –í–ê–†–ò–ê–ù–¢ 1 (–≤ –∫–æ—Ä–Ω–µ):
OPENAI_API_KEY      = "sk-..."
OPENAI_MODEL        = "gpt-4o-mini"
TELEGRAM_BOT_TOKEN  = "8427...:AAG..."
TELEGRAM_CHAT_ID    = "489408957"

# –í–ê–†–ò–ê–ù–¢ 2 (–≤ —Å–µ–∫—Ü–∏–∏ [telegram]; –∫–∞–∫ –Ω–∞ –≤–∞—à–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–µ):
[telegram]
TELEGRAM_BOT_TOKEN  = "8427...:AAG..."
TELEGRAM_CHAT_ID    = "489408957"

# (–¢–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è bot_token / default_chat_id / chat_id –∏ –¥—Ä. —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã.)
"""

from __future__ import annotations
import re
import json
from typing import List, Dict, Any, Optional

import streamlit as st
import requests

# ===== OpenAI SDK (v1+) =====
try:
    from openai import OpenAI
except Exception:
    OpenAI = None  # –ø–æ–∫–∞–∂–µ–º –æ—à–∏–±–∫—É –Ω–∏–∂–µ

# ===== UI =====
st.set_page_config(page_title="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¢–ó ‚Üí Telegram", page_icon="üìù", layout="centered")
st.title("üìù –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¢–ó –¥–ª—è –ø—Ä–æ–º–ø—Ç-–∏–Ω–∂–µ–Ω–µ—Ä–∞ ‚Üí Telegram")
st.caption("–í—Å—Ç–∞–≤—å—Ç–µ –∏–¥–µ—é –∏–ª–∏ —á–µ—Ä–Ω–æ–≤–∏–∫ –¢–ó, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —É—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –Ω—É–∂–Ω—ã–π –æ—Ç–¥–µ–ª –≤ Telegram.")

# ===== Secrets / Settings =====
OPENAI_API_KEY: Optional[str] = st.secrets.get("OPENAI_API_KEY")
OPENAI_MODEL_DEFAULT: str = st.secrets.get("OPENAI_MODEL", "gpt-4o-mini")

TELEGRAM_CONF = st.secrets.get("telegram", {}) or {}

def _get_secret_any(*names: str) -> Optional[str]:
    """–ò—â–µ–º –∫–ª—é—á–∏ –∏ –≤ –∫–æ—Ä–Ω–µ secrets, –∏ –≤ —Å–µ–∫—Ü–∏–∏ [telegram], –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞."""
    # 1) –ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for n in names:
        v = st.secrets.get(n)
        if v:
            return str(v)
        if isinstance(TELEGRAM_CONF, dict) and TELEGRAM_CONF.get(n):
            return str(TELEGRAM_CONF.get(n))
    # 2) case-insensitive
    root_lower = {k.lower(): v for k, v in dict(st.secrets).items() if not isinstance(v, dict)}
    tg_lower   = {k.lower(): v for k, v in dict(TELEGRAM_CONF).items()}
    for n in names:
        ln = n.lower()
        if ln in root_lower and root_lower[ln]:
            return str(root_lower[ln])
        if ln in tg_lower and tg_lower[ln]:
            return str(tg_lower[ln])
    return None

TG_TOKEN: Optional[str] = _get_secret_any("TELEGRAM_BOT_TOKEN", "BOT_TOKEN", "bot_token")
TG_DEFAULT_CHAT: Optional[str] = _get_secret_any("TELEGRAM_CHAT_ID", "TELEGRAM_DEFAULT_CHAT_ID", "CHAT_ID", "default_chat_id", "chat_id")
DEPT_MAP: Dict[str, str] = TELEGRAM_CONF.get("departments", {}) or {}

# ===== Session =====
if "_init" not in st.session_state:
    st.session_state._init = True
    st.session_state.stage = "input"   # input -> questions -> draft
    st.session_state.initial_text = ""
    st.session_state.questions: List[str] = []
    st.session_state.answers: Dict[int, str] = {}
    st.session_state.tz_markdown = ""
    st.session_state.selected_dept = None
    st.session_state.requester = ""

# ===== Config (–±–µ–∑ —Å–∞–π–¥–±–∞—Ä–∞) =====
model_name = OPENAI_MODEL_DEFAULT
TEMPERATURE = 0.2

# ===== Guards =====
if not OPENAI_API_KEY:
    st.error("–ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY –≤ secrets.")
if OpenAI is None:
    st.error("–ü–∞–∫–µ—Ç openai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:  pip install openai")

# ===== OpenAI helpers =====
@st.cache_resource(show_spinner=False)
def _openai_client():
    return OpenAI(api_key=OPENAI_API_KEY)

def call_chat_completion(
    messages: List[Dict[str, Any]],
    temperature: float = TEMPERATURE,
    max_new_tokens: int = 1200,
) -> str:
    """
    –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç `max_tokens` (—Ç—Ä–µ–±—É—é—Ç `max_completion_tokens` –∏–ª–∏ `max_output_tokens`).
    –î–µ–ª–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —É—Å–ø–µ—Ö–µ.
    """
    client = _openai_client()
    last_err: Optional[Exception] = None
    for extra in (
        {"max_completion_tokens": max_new_tokens},
        {"max_output_tokens": max_new_tokens},
        {"max_tokens": max_new_tokens},
        {},  # –Ω–∞ –∫—Ä–∞–π–Ω–∏–π ‚Äî –±–µ–∑ –ª–∏–º–∏—Ç–∞
    ):
        try:
            resp = client.chat.completions.create(
                model=model_name,
                messages=messages,
                temperature=temperature,
                **extra,
            )
            content = resp.choices[0].message.content or ""
            return content.strip()
        except Exception as e:
            last_err = e
            continue
    if last_err:
        st.error(f"–û—à–∏–±–∫–∞ OpenAI: {last_err}")
    return ""

# ===== Telegram helpers =====
def chunk_for_tg(text: str, limit: int = 4000) -> List[str]:
    text = text.strip()
    if len(text) <= limit:
        return [text]
    parts: List[str] = []
    current: List[str] = []
    size = 0
    for para in text.split("\n\n"):
        block = para.strip() + "\n\n"
        if size + len(block) > limit and current:
            parts.append("".join(current).rstrip())
            current, size = [block], len(block)
        else:
            current.append(block); size += len(block)
    if current:
        parts.append("".join(current).rstrip())
    fixed: List[str] = []
    for p in parts:
        if len(p) <= limit:
            fixed.append(p); continue
        buf: List[str] = []
        tally = 0
        for ln in p.splitlines(keepends=True):
            if tally + len(ln) > limit and buf:
                fixed.append("".join(buf).rstrip()); buf, tally = [ln], len(ln)
            else:
                buf.append(ln); tally += len(ln)
        if buf:
            fixed.append("".join(buf).rstrip())
    return fixed

def send_to_telegram(text: str, chat_id: Optional[str] = None):
    if not TG_TOKEN:
        st.error("–ù–µ –Ω–∞–π–¥–µ–Ω telegram.bot_token / TELEGRAM_BOT_TOKEN / BOT_TOKEN –≤ secrets.")
        return []
    target_chat = chat_id or TG_DEFAULT_CHAT
    if not target_chat:
        st.error("–ù–µ –∑–∞–¥–∞–Ω chat_id (telegram.default_chat_id | telegram.chat_id | TELEGRAM_CHAT_ID | TELEGRAM_DEFAULT_CHAT_ID | CHAT_ID).")
        return []
    url = f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage"
    results = []
    for chunk in chunk_for_tg(text):
        r = requests.post(url, data={"chat_id": target_chat, "text": chunk, "disable_web_page_preview": True}, timeout=30)
        results.append(r)
        if r.status_code != 200:
            st.error(f"Telegram –æ—à–∏–±–∫–∞ {r.status_code}: {r.text}")
            break
    return results

def reset_to_home():
    """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω."""
    st.session_state.stage = "input"
    st.session_state.initial_text = ""
    st.session_state.questions = []
    st.session_state.answers = {}
    st.session_state.tz_markdown = ""
    st.session_state.selected_dept = None
    st.session_state.requester = ""

# ===== Prompts =====
SYSTEM_PROMPT = (
    "–í—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –∏ –ø—Ä–æ–º–ø—Ç-–∏–Ω–∂–µ–Ω–µ—Ä. –†–∞–±–æ—Ç–∞–µ—Ç–µ –ø–æ-—Ä—É—Å—Å–∫–∏, –∫—Ä–∞—Ç–∫–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ. "
    "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª —Ç–æ–ª—å–∫–æ –∏–¥–µ—é ‚Äî —Å–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã (5‚Äì10, –Ω–µ –±–∞–Ω–∞–ª—å–Ω—ã–µ). "
    "–ö–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã ‚Äî —Å–æ–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ, –Ω–æ –ª–∞–∫–æ–Ω–∏—á–Ω–æ–µ –¢–ó –≤ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç-–∏–Ω–∂–µ–Ω–µ—Ä–∞. "
    "–¢–ó –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –Ω–∞ –±–∞–∑–µ LLM."
)
QUESTIONS_INSTRUCTION = (
    "–°—Ñ–æ—Ä–º–∏—Ä—É–π —Å–ø–∏—Å–æ–∫ –∏–∑ 5‚Äì10 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–π –∏–¥–µ–µ/—á–µ—Ä–Ω–æ–≤–∏–∫—É. "
    "–§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–≥–æ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫, –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É, –±–µ–∑ –ø–æ–¥—Å–ø–∏—Å–∫–æ–≤."
)
TZ_INSTRUCTION = (
    "–ù–∞ –æ—Å–Ω–æ–≤–µ –∏–¥–µ–∏/—á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å–æ–±–µ—Ä–∏ –¢–ó (Markdown, –±–µ–∑ –ª–∏—à–Ω–µ–π –≤–æ–¥—ã) –ø–æ —à–∞–±–ª–æ–Ω—É:\n\n"
    "# –ù–∞–∑–≤–∞–Ω–∏–µ\n–ö–æ—Ä–æ—Ç–∫–æ–µ –∏ —ë–º–∫–æ–µ.\n\n"
    "## –¶–µ–ª—å\n1‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É –∏ —Ü–µ–ª–µ–≤—É—é –º–µ—Ç—Ä–∏–∫—É.\n\n"
    "## –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n–ö–∞–Ω–∞–ª—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —è–∑—ã–∫–∏, –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å/–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.\n\n"
    "## –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏\n–ë—É–ª–ª–µ—Ç-—Å–ø–∏—Å–æ–∫ —Ç–∏–ø–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ (3‚Äì6).\n\n"
    "## –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n–ß—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å (–ø–æ–ª—è —Ñ–æ—Ä–º—ã, —Ñ–∞–π–ª—ã, –∫–æ–Ω—Ç–µ–∫—Å—Ç, —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏).\n\n"
    "## –í—ã—Ö–æ–¥/—Ä–µ–∑—É–ª—å—Ç–∞—Ç\n–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏, —Å—Ç–∏–ª—å, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–ª–∏–Ω–µ.\n\n"
    "## –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–∏—ë–º–∫–∏\n–ß—ë—Ç–∫–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ (bullet list).\n\n"
    "## –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ç–µ–º—ã/—Å—Ç–∏–ª–∏, —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n\n"
    "## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–º–ø—Ç–∞\n–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, few-shot (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã), temperature/top_p, –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.\n\n"
    "## –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ\n–ß—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, –∫–∞–∫ –∏–∑–º–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ.\n\n"
    "## –†–∏—Å–∫–∏ –∏ –¥–æ–ø—É—â–µ–Ω–∏—è\n–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏ —Å–ø–æ—Å–æ–±—ã –∏—Ö —Å–Ω–∏–∂–µ–Ω–∏—è.\n\n"
    "## –ß–µ–∫-–ª–∏—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏\n–ö–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –∏–∑ 5‚Äì8 –ø—É–Ω–∫—Ç–æ–≤.\n\n"
    "–ü–∏—à–∏ –ø–æ-—Ä—É—Å—Å–∫–∏, –¥–µ–ª–∞–π —Ä–∞–∑–¥–µ–ª—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ –∏ –ø—Ä–∏–∫–ª–∞–¥–Ω—ã–º–∏."
)

# ===== Parsers =====
def parse_numbered_questions(text_block: str) -> List[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ–º '1. –≤–æ–ø—Ä–æ—Å' –∏ '- –≤–æ–ø—Ä–æ—Å'."""
    lines = text_block.splitlines()
    questions: List[str] = []
    for s in (ln.strip() for ln in lines):
        if not s:
            continue
        m = re.match(r"(\d+)[\).]\s*(.+)", s)
        if m:
            q = m.group(2).strip().rstrip("?„ÄÇÔºéÔºÅ!Ôºõ;Ôºö:")
            if q:
                questions.append(q + "?")
            continue
        m2 = re.match(r"^[\-‚Ä¢]\s*(.+)", s)
        if m2:
            q = m2.group(1).strip().rstrip("?„ÄÇÔºéÔºÅ!Ôºõ;Ôºö:")
            if q:
                questions.append(q + "?")
    if not questions:  # –ø—Ä–µ–≤—Ä–∞—Ç–∏–º —Å—Ç—Ä–æ–∫–∏ –≤ –≤–æ–ø—Ä–æ—Å—ã
        for s in (ln.strip() for ln in lines if ln.strip()):
            questions.append(s.rstrip("?") + "?")
    return questions[:10]

def parse_json_questions(text_block: str) -> List[str]:
    try:
        data = json.loads(text_block)
        if isinstance(data, dict) and isinstance(data.get("questions"), list):
            return [str(x).strip().rstrip("?") + "?" for x in data["questions"] if str(x).strip()][:10]
    except Exception:
        pass
    return []

# ===== Question generation =====
def generate_questions(initial_text: str) -> List[str]:
    """–°—Ç–æ–π–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: —Å–ø–∏—Å–æ–∫ ‚Üí JSON ‚Üí —Ñ–æ–ª–±—ç–∫."""
    msg1 = [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "user", "content": f"""–¢–µ–∫—Å—Ç:

{initial_text}

{QUESTIONS_INSTRUCTION}"""},
    ]
    raw1 = call_chat_completion(msg1, temperature=TEMPERATURE)
    qs = parse_numbered_questions(raw1) if raw1 else []
    if qs:
        return qs

    # –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äî —Å—Ç—Ä–æ–≥–æ JSON –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π (–±–µ–∑ f-—Å—Ç—Ä–æ–∫, —á—Ç–æ–±—ã –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–∫–æ–±–∫–∏)
    json_prompt = (
        '–°—Ñ–æ—Ä–º–∏—Ä—É–π 7 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å—Ç—Ä–æ–≥–æ –≤ JSON –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, '
        '—Ñ–æ—Ä–º–∞—Ç: {"questions":["–≤–æ–ø—Ä–æ—Å1","–≤–æ–ø—Ä–æ—Å2","..."]}. –¢–µ–∫—Å—Ç:\n\n' + str(initial_text)
    )
    msg2 = [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "user", "content": json_prompt},
    ]
    raw2 = call_chat_completion(msg2, temperature=TEMPERATURE)
    qs = parse_json_questions(raw2) if raw2 else []
    if qs:
        return qs

    # –§–æ–ª–±—ç–∫-–≤–æ–ø—Ä–æ—Å—ã
    return [
        "–ö–∞–∫–æ–≤–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –∏ —Ü–µ–ª–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞?",
        "–ö—Ç–æ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è/–ø–µ—Ä—Å–æ–Ω—ã –∏ –∏—Ö –∫–ª—é—á–µ–≤—ã–µ –∑–∞–¥–∞—á–∏?",
        "–ö–∞–∫–∏–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ/–ø–æ–ª—è –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å?",
        "–ö–∞–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Å—Ç–∏–ª—é, —Ç–æ–Ω—É, –¥–ª–∏–Ω–µ –∏ —è–∑—ã–∫—É –æ—Ç–≤–µ—Ç–∞?",
        "–ö–∞–∫–∏–µ —Ä–∏—Å–∫–∏/–Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å?",
        "–ï—Å—Ç—å –ª–∏ –ø—Ä–∏–º–µ—Ä—ã –∂–µ–ª–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (few-shot)?",
        "–ì–¥–µ –∏ –∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–æ (–∫–∞–Ω–∞–ª/–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è)?",
        "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—é –∏ –º–µ—Ç—Ä–∏–∫–∞–º –∫–∞—á–µ—Å—Ç–≤–∞?",
        "–ö–∞–∫–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ/–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è?",
    ]

# ===== Misc builders =====
def build_header_meta(dept: Optional[str], requester: Optional[str]) -> str:
    meta = []
    if dept:
        meta.append(f"–û—Ç–¥–µ–ª: {dept}")
    if requester:
        meta.append(f"–ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫: {requester}")
    return ("\n" + "\n".join(meta) + "\n\n") if meta else "\n"

def build_fallback_tz(initial_text: str, questions: List[str], answers: Dict[int, str]) -> str:
    md: List[str] = []
    md += ["# –ù–∞–∑–≤–∞–Ω–∏–µ\n", "–ß–µ—Ä–Ω–æ–≤–∏–∫ –¢–ó (–∞–≤—Ç–æ—Å–±–æ—Ä–∫–∞)\n\n"]
    md += ["## –ò—Å—Ö–æ–¥–Ω—ã–π –≤–≤–æ–¥\n", str(initial_text).strip() + "\n\n"]
    md += ["## –£—Ç–æ—á–Ω–µ–Ω–∏—è\n"]
    for i in range(len(questions)):
        q = str(questions[i]); ans = str(answers.get(i, "") or "‚Äî")
        md.append(f"- {i+1}. {q}\n  –û—Ç–≤–µ—Ç: {ans}\n")
    md += [
        "\n## –¶–µ–ª—å\n‚Äî\n\n",
        "## –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n‚Äî\n\n",
        "## –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏\n- ‚Äî\n- ‚Äî\n- ‚Äî\n\n",
        "## –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n- ‚Äî\n\n",
        "## –í—ã—Ö–æ–¥/—Ä–µ–∑—É–ª—å—Ç–∞—Ç\n- ‚Äî\n\n",
        "## –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–∏—ë–º–∫–∏\n- ‚Äî\n\n",
        "## –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n- ‚Äî\n\n",
        "## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–º–ø—Ç–∞\n- –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∑–∞–ø–æ–ª–Ω–∏—Ç—å\n- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: temperature/top_p ‚Äî —É—Ç–æ—á–Ω–∏—Ç—å\n\n",
        "## –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ\n- ‚Äî\n\n",
        "## –†–∏—Å–∫–∏ –∏ –¥–æ–ø—É—â–µ–Ω–∏—è\n- ‚Äî\n\n",
        "## –ß–µ–∫-–ª–∏—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏\n- ‚Äî\n",
    ]
    return "".join(md)

# ===================== STAGES =====================
# ----- Stage: Input -----
if st.session_state.stage == "input":
    st.subheader("–®–∞–≥ 1. –í–≤–µ–¥–∏—Ç–µ –∏–¥–µ—é –∏–ª–∏ —á–µ—Ä–Ω–æ–≤–∏–∫ –¢–ó")
    input_mode = st.radio("–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:", ["–ò–¥–µ—è (—Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç)", "–ß–µ—Ä–Ω–æ–≤–∏–∫ –¢–ó"], index=0, horizontal=True)
    placeholder = (
        "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É/—Ü–µ–ª—å, —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é, –∂–µ–ª–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è‚Ä¶"
        if input_mode.startswith("–ò–¥–µ—è")
        else "–í—Å—Ç–∞–≤—å—Ç–µ —á–µ—Ä–Ω–æ–≤–∏–∫ –¢–ó ‚Äî —É—Ç–æ—á–Ω–∏–º –¥–µ—Ç–∞–ª–∏ –∏ —É—Å–∏–ª–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É"
    )
    st.session_state.initial_text = st.text_area(placeholder, value=st.session_state.initial_text, height=220)

    col_a, col_b = st.columns([1, 1])
    with col_a:
        if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã", type="primary", use_container_width=True, disabled=not bool(st.session_state.initial_text.strip())):
            with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã‚Ä¶"):
                qs = generate_questions(st.session_state.initial_text)
                if not qs:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ—Ç –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                else:
                    st.session_state.questions = qs
                    st.session_state.answers = {i: "" for i in range(len(qs))}
                    st.session_state.stage = "questions"
                    st.rerun()
    with col_b:
        if st.button("–û—á–∏—Å—Ç–∏—Ç—å", use_container_width=True):
            st.session_state.initial_text = ""

# ----- Stage: Questions -----
elif st.session_state.stage == "questions":
    st.subheader("–®–∞–≥ 2. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã")
    if not st.session_state.questions:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –≤–≤–µ–¥–∏—Ç–µ –∏–¥–µ—é/—á–µ—Ä–Ω–æ–≤–∏–∫. –ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
        if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –µ—â—ë —Ä–∞–∑"):
            with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã‚Ä¶"):
                qs = generate_questions(st.session_state.initial_text)
                st.session_state.questions = qs
                st.session_state.answers = {i: "" for i in range(len(qs))}
                st.rerun()
    else:
        for i, q in enumerate(st.session_state.questions, start=1):
            st.session_state.answers[i - 1] = st.text_area(f"{i}. {q}", value=st.session_state.answers.get(i - 1, ""), height=100)

        col1, col2, col3 = st.columns([1, 1, 1])
        with col1:
            if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¢–ó", type="primary", use_container_width=True):
                with st.spinner("–°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ –¢–ó‚Ä¶"):
                    answers_block = "\n\n".join(
                        [f"{i+1}. {st.session_state.questions[i]}\n–û—Ç–≤–µ—Ç: {st.session_state.answers.get(i, '').strip()}" for i in range(len(st.session_state.questions))]
                    )
                    msg = [
                        {"role": "system", "content": SYSTEM_PROMPT},
                        {"role": "user", "content": f"""–ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (–∏–¥–µ—è/—á–µ—Ä–Ω–æ–≤–∏–∫):

{st.session_state.initial_text}

–û—Ç–≤–µ—Ç—ã –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:

{answers_block}

{TZ_INSTRUCTION}"""},
                    ]
                    tz_md = call_chat_completion(msg, temperature=TEMPERATURE)
                    if not tz_md.strip():
                        tz_md = build_fallback_tz(st.session_state.initial_text, st.session_state.questions, st.session_state.answers)
                        st.warning("–ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç ‚Äî —Å–æ–±—Ä–∞–ª–∏ –±–∞–∑–æ–≤—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ –¢–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
                    st.session_state.tz_markdown = tz_md
                    st.session_state.stage = "draft"
                    st.rerun()
        with col2:
            if st.button("–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã", use_container_width=True):
                with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã‚Ä¶"):
                    qs = generate_questions(st.session_state.initial_text)
                    st.session_state.questions = qs
                    st.session_state.answers = {i: "" for i in range(len(qs))}
                    st.rerun()
        with col3:
            if st.button("–ù–∞–∑–∞–¥", use_container_width=True):
                st.session_state.stage = "input"
                st.rerun()

# ----- Stage: Draft / Preview -----
elif st.session_state.stage == "draft":
    st.subheader("–®–∞–≥ 3. –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¢–ó")
    st.info("–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¢–ó –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.")
    st.session_state.tz_markdown = st.text_area("–¢–ó (Markdown)", value=st.session_state.tz_markdown, height=420)

    dept_names = list(DEPT_MAP.keys())
    if dept_names:
        st.session_state.selected_dept = st.selectbox("–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å (–æ—Ç–¥–µ–ª)", options=dept_names, index=0)
    else:
        st.session_state.selected_dept = None

    st.session_state.requester = st.text_input("–ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫ (–§–ò–û, –Ω–∏–∫, –∫–æ–Ω—Ç–∞–∫—Ç)", value=st.session_state.requester)

    c1, c2, c3 = st.columns([1, 1, 1])
    with c1:
        st.download_button("–°–∫–∞—á–∞—Ç—å .md", data=st.session_state.tz_markdown.encode("utf-8"), file_name="tz_prompt.md", mime="text/markdown")
    with c2:
        if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram", type="primary", use_container_width=True):
            dept = st.session_state.selected_dept
            chat_id = DEPT_MAP.get(dept) if dept else None
            header = "–¢–ó –¥–ª—è –ø—Ä–æ–º–ø—Ç-–∏–Ω–∂–µ–Ω–µ—Ä–∞\n" + ("=" * 24) + build_header_meta(dept, st.session_state.requester)
            final_text = header + st.session_state.tz_markdown
            with st.spinner("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram‚Ä¶"):
                responses = send_to_telegram(final_text, chat_id=chat_id)
                if responses and all(r.status_code == 200 for r in responses):
                    st.toast("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram ‚úÖ", icon="‚úÖ")
                    reset_to_home()
                    st.rerun()
                else:
                    st.warning("–ß–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π –º–æ–≥–ª–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏ –≤—ã—à–µ.")
    with c3:
        if st.button("–ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º", use_container_width=True):
            st.session_state.stage = "questions"
            st.rerun()
