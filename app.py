# -*- coding: utf-8 -*-


from __future__ import annotations
import os
import re
import json
import textwrap
from typing import List, Dict, Any

import streamlit as st
import requests

# === OpenAI SDK (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ v1+) ===
try:
    from openai import OpenAI
except Exception as e:  # pragma: no cover
    OpenAI = None

# ---------------------------- UI CONFIG ----------------------------
st.set_page_config(page_title="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¢–ó ‚Üí Telegram", page_icon="üìù", layout="centered")

st.title("üìù –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¢–ó –¥–ª—è –ø—Ä–æ–º–ø—Ç‚Äë–∏–Ω–∂–µ–Ω–µ—Ä–∞")
st.caption("–í—Å—Ç–∞–≤—å—Ç–µ –∏–¥–µ—é –∏–ª–∏ —á–µ—Ä–Ω–æ–≤–∏–∫ –¢–ó, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —É—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –Ω—É–∂–Ω—ã–π –æ—Ç–¥–µ–ª –≤ Telegram.")

# ---------------------------- Secrets / Settings ----------------------------
OPENAI_API_KEY = st.secrets.get("OPENAI_API_KEY")
OPENAI_MODEL_DEFAULT = st.secrets.get("OPENAI_MODEL", "gpt-4o-mini")  # –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ —Å–∞–π–¥–±–∞—Ä–µ

TELEGRAM_CONF = st.secrets.get("telegram", {})
TG_TOKEN = TELEGRAM_CONF.get("bot_token") or st.secrets.get("TELEGRAM_BOT_TOKEN")
TG_DEFAULT_CHAT = TELEGRAM_CONF.get("default_chat_id") or st.secrets.get("TELEGRAM_CHAT_ID")
DEPT_MAP: Dict[str, str] = TELEGRAM_CONF.get("departments", {})

if "_init" not in st.session_state:
    st.session_state._init = True
    st.session_state.stage = "input"  # input -> questions -> draft -> send
    st.session_state.initial_text = ""
    st.session_state.questions: List[str] = []
    st.session_state.answers: Dict[int, str] = {}
    st.session_state.tz_markdown = ""
    st.session_state.confirmed = False
    st.session_state.selected_dept = None
    st.session_state.requester = ""

# ---------------------------- Config (–±–µ–∑ —Å–∞–π–¥–±–∞—Ä–∞) ----------------------------
model_name = OPENAI_MODEL_DEFAULT
TEMPERATURE = 0.2

# ---------------------------- Guards ----------------------------
if not OPENAI_API_KEY:
    st.error("–ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY –≤ secrets. –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –≤ .streamlit/secrets.toml –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")

if OpenAI is None:
    st.error("–ü–∞–∫–µ—Ç openai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ `pip install openai` –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ.")

# ---------------------------- Helpers ----------------------------

def get_openai_client() -> OpenAI:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI."""
    return OpenAI(api_key=OPENAI_API_KEY)


def call_chat_completion(messages: List[Dict[str, Any]], max_tokens: int = 2000, temperature: float = 0.2) -> str:
    """–í—ã–∑–æ–≤ chat.completions —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    client = get_openai_client()
    try:
        resp = client.chat.completions.create(
            model=model_name,
            messages=messages,
            temperature=temperature,
            max_tokens=max_tokens,
        )
        content = resp.choices[0].message.content or ""
        return content.strip()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        return ""


def chunk_for_tg(text: str, limit: int = 4000) -> List[str]:
    """–†–∞–∑–±–∏—Ç—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Telegram (–ª–∏–º–∏—Ç ~4096 —Å–∏–º–≤.)."""
    text = text.strip()
    if len(text) <= limit:
        return [text]
    parts = []
    current = []
    size = 0
    for para in text.split("\n\n"):
        para_block = (para.strip() + "\n\n")
        if size + len(para_block) > limit and current:
            parts.append("".join(current).rstrip())
            current = [para_block]
            size = len(para_block)
        else:
            current.append(para_block)
            size += len(para_block)
    if current:
        parts.append("".join(current).rstrip())
    # –µ—Å–ª–∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –∫–∞–∫–∏–µ-—Ç–æ –∫—É—Å–∫–∏ –±–æ–ª—å—à–∏–µ ‚Äî –¥–µ–ª–∏–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    fixed = []
    for p in parts:
        if len(p) <= limit:
            fixed.append(p)
        else:
            buf = []
            tally = 0
            for line in p.splitlines(keepends=True):
                if tally + len(line) > limit and buf:
                    fixed.append("".join(buf).rstrip())
                    buf = [line]
                    tally = len(line)
                else:
                    buf.append(line)
                    tally += len(line)
            if buf:
                fixed.append("".join(buf).rstrip())
    return fixed


def send_to_telegram(text: str, chat_id: str | None = None) -> List[requests.Response]:
    if not TG_TOKEN:
        st.error("–ù–µ –Ω–∞–π–¥–µ–Ω telegram.bot_token –≤ secrets.")
        return []
    target_chat = chat_id or TG_DEFAULT_CHAT
    if not target_chat:
        st.error("–ù–µ –∑–∞–¥–∞–Ω chat_id –¥–ª—è Telegram (telegram.default_chat_id –∏–ª–∏ TELEGRAM_CHAT_ID).")
        return []
    url = f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage"
    results = []
    for chunk in chunk_for_tg(text):
        payload = {
            "chat_id": target_chat,
            "text": chunk,
            # –ë–µ–∑ parse_mode, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –•–æ—Ç–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî —Å–º–µ–Ω–∏—Ç–µ –Ω–∞ 'HTML'.
            # "parse_mode": "HTML",
            "disable_web_page_preview": True,
        }
        r = requests.post(url, data=payload, timeout=30)
        results.append(r)
        if r.status_code != 200:
            st.error(f"Telegram –æ—à–∏–±–∫–∞ {r.status_code}: {r.text}")
            break
    return results


# ---------------------------- Prompt builders ----------------------------
SYSTEM_PROMPT = (
    "–í—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –∏ –ø—Ä–æ–º–ø—Ç-–∏–Ω–∂–µ–Ω–µ—Ä. –†–∞–±–æ—Ç–∞–µ—Ç–µ –ø–æ-—Ä—É—Å—Å–∫–∏, –∫—Ä–∞—Ç–∫–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ. "
    "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª —Ç–æ–ª—å–∫–æ –∏–¥–µ—é ‚Äî —Å–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã (5‚Äì10, –Ω–µ –±–∞–Ω–∞–ª—å–Ω—ã–µ). "
    "–ö–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã ‚Äî —Å–æ–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ, –Ω–æ –ª–∞–∫–æ–Ω–∏—á–Ω–æ–µ –¢–ó –≤ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç‚Äë–∏–Ω–∂–µ–Ω–µ—Ä–∞. "
    "–¢–ó –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –Ω–∞ –±–∞–∑–µ LLM."
)

QUESTIONS_INSTRUCTION = (
    "–°—Ñ–æ—Ä–º–∏—Ä—É–π —Å–ø–∏—Å–æ–∫ –∏–∑ 5‚Äì10 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–π –∏–¥–µ–µ/—á–µ—Ä–Ω–æ–≤–∏–∫—É. "
    "–§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–≥–æ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫, –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É, –±–µ–∑ –ø–æ–¥—Å–ø–∏—Å–∫–æ–≤."
)

TZ_INSTRUCTION = (
    "–ù–∞ –æ—Å–Ω–æ–≤–µ –∏–¥–µ–∏/—á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å–æ–±–µ—Ä–∏ –¢–ó (Markdown, –±–µ–∑ –ª–∏—à–Ω–µ–π –≤–æ–¥—ã) –ø–æ —à–∞–±–ª–æ–Ω—É:\n\n"
    "# –ù–∞–∑–≤–∞–Ω–∏–µ\n"
    "–ö–æ—Ä–æ—Ç–∫–æ–µ –∏ —ë–º–∫–æ–µ.\n\n"
    "## –¶–µ–ª—å\n"
    "1‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É –∏ —Ü–µ–ª–µ–≤—É—é –º–µ—Ç—Ä–∏–∫—É.\n\n"
    "## –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n"
    "–ö–∞–Ω–∞–ª—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —è–∑—ã–∫–∏, –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å/–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.\n\n"
    "## –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏\n"
    "–ë—É–ª–ª–µ—Ç-—Å–ø–∏—Å–æ–∫ —Ç–∏–ø–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ (3‚Äì6).\n\n"
    "## –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
    "–ß—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å (–ø–æ–ª—è —Ñ–æ—Ä–º—ã, —Ñ–∞–π–ª—ã, –∫–æ–Ω—Ç–µ–∫—Å—Ç, —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏).\n\n"
    "## –í—ã—Ö–æ–¥/—Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
    "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏, —Å—Ç–∏–ª—å, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–ª–∏–Ω–µ.\n\n"
    "## –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–∏—ë–º–∫–∏\n"
    "–ß—ë—Ç–∫–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ (bullet list).\n\n"
    "## –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n"
    "–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ç–µ–º—ã/—Å—Ç–∏–ª–∏, —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n\n"
    "## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–º–ø—Ç–∞\n"
    "–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, few-shot (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã), temperature/top_p, –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.\n\n"
    "## –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
    "–ß—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, –∫–∞–∫ –∏–∑–º–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ.\n\n"
    "## –†–∏—Å–∫–∏ –∏ –¥–æ–ø—É—â–µ–Ω–∏—è\n"
    "–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏ —Å–ø–æ—Å–æ–±—ã –∏—Ö —Å–Ω–∏–∂–µ–Ω–∏—è.\n\n"
    "## –ß–µ–∫-–ª–∏—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏\n"
    "–ö–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –∏–∑ 5‚Äì8 –ø—É–Ω–∫—Ç–æ–≤.\n\n"
    "–ü–∏—à–∏ –ø–æ-—Ä—É—Å—Å–∫–∏, –¥–µ–ª–∞–π —Ä–∞–∑–¥–µ–ª—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ –∏ –ø—Ä–∏–∫–ª–∞–¥–Ω—ã–º–∏."
)


def parse_numbered_questions(text_block: str) -> List[str]:
    """–í—ã—Ç–∞—â–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ '1. –≤–æ–ø—Ä–æ—Å' –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    lines = text_block.splitlines()
    questions = []
    for ln in lines:
        m = re.match(r"\s*(\d+)[\).]\s*(.+)", ln.strip())
        if m:
            q = m.group(2).strip()
            if q:
                questions.append(q)
    # fallback ‚Äî –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –¥–∞–ª–∞ –ø—Ä–æ—Å—Ç–æ –∞–±–∑–∞—Ü—ã
    if not questions:
        for ln in lines:
            ln = ln.strip().rstrip("?„ÄÇÔºéÔºÅ!Ôºõ;Ôºö:")
            if ln:
                questions.append(ln + "?")
    # –æ–≥—Ä–∞–Ω–∏—á–∏–º 10
    return questions[:10]


def build_header_meta(dept: str | None, requester: str | None) -> str:
    meta = []
    if dept:
        meta.append(f"–û—Ç–¥–µ–ª: {dept}")
    if requester:
        meta.append(f"–ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫: {requester}")
    if meta:
        return "\n" + "\n".join(meta) + "\n\n"
    return "\n"

# ---------------------------- Stage: Input ----------------------------
if st.session_state.stage == "input":
    st.subheader("–®–∞–≥ 1. –í–≤–µ–¥–∏—Ç–µ –∏–¥–µ—é –∏–ª–∏ —á–µ—Ä–Ω–æ–≤–∏–∫ –¢–ó")
    input_mode = st.radio(
        "–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:",
        ["–ò–¥–µ—è (—Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç)", "–ß–µ—Ä–Ω–æ–≤–∏–∫ –¢–ó"],
        index=0,
        horizontal=True,
    )
    placeholder = (
        "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É/—Ü–µ–ª—å, —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é, –∂–µ–ª–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è‚Ä¶"
        if input_mode.startswith("–ò–¥–µ—è")
        else "–í—Å—Ç–∞–≤—å—Ç–µ –ª—é–±–æ–π –≤–∞—à —á–µ—Ä–Ω–æ–≤–∏–∫ –¢–ó ‚Äî –º—ã —É—Ç–æ—á–Ω–∏–º –¥–µ—Ç–∞–ª–∏ –∏ —É—Å–∏–ª–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É"
    )
    st.session_state.initial_text = st.text_area(
        placeholder,
        value=st.session_state.initial_text,
        height=220,
    )

    col_a, col_b = st.columns([1, 1])
    with col_a:
        if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã", type="primary", use_container_width=True, disabled=not bool(st.session_state.initial_text.strip())):
            with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã‚Ä¶"):
                msg = [
                    {"role": "system", "content": SYSTEM_PROMPT},
                    {"role": "user", "content": f"–¢–µ–∫—Å—Ç:\n\n{st.session_state.initial_text}\n\n{QUESTIONS_INSTRUCTION}"},
                ]
                raw = call_chat_completion(msg, temperature=TEMPERATURE)
                st.session_state.questions = parse_numbered_questions(raw)
                st.session_state.answers = {i: "" for i in range(len(st.session_state.questions))}
                st.session_state.stage = "questions"
                st.rerun()
    with col_b:
        st.button("–û—á–∏—Å—Ç–∏—Ç—å", use_container_width=True, on_click=lambda: st.session_state.update(initial_text=""))

# ---------------------------- Stage: Questions ----------------------------
elif st.session_state.stage == "questions":
    st.subheader("–®–∞–≥ 2. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã")
    if not st.session_state.questions:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –≤–≤–µ–¥–∏—Ç–µ –∏–¥–µ—é/—á–µ—Ä–Ω–æ–≤–∏–∫.")
    else:
        for i, q in enumerate(st.session_state.questions, start=1):
            st.session_state.answers[i - 1] = st.text_area(f"{i}. {q}", value=st.session_state.answers.get(i - 1, ""), height=100)

        col1, col2 = st.columns([1, 1])
        with col1:
            if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¢–ó", type="primary", use_container_width=True):
                with st.spinner("–°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ –¢–ó‚Ä¶"):
                    # –°–æ–±–∏—Ä–∞–µ–º –±–ª–æ–∫ —Å –æ—Ç–≤–µ—Ç–∞–º–∏
                    answers_block = "\n\n".join([f"{i+1}. {st.session_state.questions[i]}\n–û—Ç–≤–µ—Ç: {st.session_state.answers.get(i, '').strip()}" for i in range(len(st.session_state.questions))])
                    msg = [
                        {"role": "system", "content": SYSTEM_PROMPT},
                        {"role": "user", "content": (
                            f"–ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (–∏–¥–µ—è/—á–µ—Ä–Ω–æ–≤–∏–∫):\n\n{st.session_state.initial_text}\n\n"
                            f"–û—Ç–≤–µ—Ç—ã –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n{answers_block}\n\n{TZ_INSTRUCTION}"
                        )},
                    ]
                    tz_md = call_chat_completion(msg, temperature=TEMPERATURE)
                    st.session_state.tz_markdown = tz_md
                    st.session_state.stage = "draft"
                    st.rerun()
        with col2:
            if st.button("–ù–∞–∑–∞–¥", use_container_width=True):
                st.session_state.stage = "input"
                st.rerun()

# ---------------------------- Stage: Draft / Preview ----------------------------
elif st.session_state.stage == "draft":
    st.subheader("–®–∞–≥ 3. –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¢–ó")

    st.info("–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¢–ó –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.")
    st.session_state.tz_markdown = st.text_area("–¢–ó (Markdown)", value=st.session_state.tz_markdown, height=420)

    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram
    dept_names = list(DEPT_MAP.keys())
    if dept_names:
        st.session_state.selected_dept = st.selectbox("–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å (–æ—Ç–¥–µ–ª)", options=dept_names, index=0)
    else:
        st.session_state.selected_dept = None
        st.caption("–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ –æ—Ç–¥–µ–ª–∞–º –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ secrets ‚Äî –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω default_chat_id.")

    st.session_state.requester = st.text_input("–ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫ (–§–ò–û, –Ω–∏–∫, –∫–æ–Ω—Ç–∞–∫—Ç)", value=st.session_state.requester)

    c1, c2, c3 = st.columns([1, 1, 1])
    with c1:
        st.download_button("–°–∫–∞—á–∞—Ç—å .md", data=st.session_state.tz_markdown.encode("utf-8"), file_name="tz_prompt.md", mime="text/markdown")
    with c2:
        if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram", type="primary", use_container_width=True):
            # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            dept = st.session_state.selected_dept
            chat_id = None
            if dept and dept in DEPT_MAP:
                chat_id = DEPT_MAP[dept]
            header = "–¢–ó –¥–ª—è –ø—Ä–æ–º–ø—Ç‚Äë–∏–Ω–∂–µ–Ω–µ—Ä–∞\n" + ("=" * 24) + build_header_meta(dept, st.session_state.requester)
            final_text = header + st.session_state.tz_markdown
            with st.spinner("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram‚Ä¶"):
                responses = send_to_telegram(final_text, chat_id=chat_id)
                if responses and all(r.status_code == 200 for r in responses):
                    st.success("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram ‚úÖ")
                else:
                    st.warning("–ß–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π –º–æ–≥–ª–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏ –≤—ã—à–µ.")
    with c3:
        if st.button("–ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º", use_container_width=True):
            st.session_state.stage = "questions"
            st.rerun()


